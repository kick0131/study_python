service: dynamoaccess
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
  apiGateway:
    shouldStartNameWithService: true
  stage: dev
  region: ap-northeast-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - node_modules

functions:
  hello:
    handler: wsgi_handler.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http: ANY /
      - http:
          path: cats
          method: GET
          integration: lambda-proxy
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: request
      - http:
          path: dogs/{count}
          method: GET
          integration: lambda-proxy
      - http:
          path: hello
          method: POST
          integration: lambda-proxy
  # 動作確認オーソライザ
  authorizerFunc:
    # LambdaLayerで定義している関数を指定
    handler: authorizer.lambda_handler
    layers:
      # ARNベタ書きしているが、本来は環境変数ファイルからの参照
      - arn:aws:lambda:ap-northeast-1:718248775023:layer:commonpy:1	
 
# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        -
          AttributeName: tenantId
          AttributeType: S
        -
          AttributeName: dataTypeId
          AttributeType: S
       # キーの種類を指定（ハッシュorレンジキー）
        KeySchema:
          -
            AttributeName: tenantId
            KeyType: HASH
          -
            AttributeName: dataTypeId
            KeyType: RANGE
        # プロビジョニングするキャパシティーユニットの設定
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # テーブル名の指定
        TableName: datatypeSample
        TimeToLiveSpecification:
          AttributeName: ExpirationTime
          Enabled: true
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-wsgi
custom:
  pythonRequirements:
    layer: true
  wsgi:
    app: handler.app
    packRequirements: false
