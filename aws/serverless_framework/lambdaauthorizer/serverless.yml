# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: authsample
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-python-requirements
  - serverless-latest-layer-version

custom:
  defaultStage: dev
  environment:
    dev: ${file(./conf/dev/dev.yml)}
    prod: ${file(./conf/dev/prod.yml)}

package:
  exclude:
    - node_modules/**

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
  apiGateway:
    shouldStartNameWithService: true

# you can overwrite defaults here
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${self:custom.environment.${self:provider.stage}.REGION}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  # サービスAPI(ダミー)
  hello:
    handler: hello.execute
    events:
      - http:
          path: /
          method: get
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: request
    layers:
      # 共通処理
      - ${self:custom.environment.${self:provider.stage}.COMMONLAMBDALAYER_ARN}

  #認証認可
  authorizerFunc:
    handler: authorizer.lambda_handler
    # 環境変数は外部ファイルから上書きする
    environment:
      REGION: ${self:custom.environment.${self:provider.stage}.REGION}
      USER_POOL_ID: ${self:custom.environment.${self:provider.stage}.COGNITO.USER_POOL_ID}
      APP_CLIENT_ID: ${self:custom.environment.${self:provider.stage}.COGNITO.APP_CLIENT_ID}
    layers:
      # IDトークン検証処理
      - { Ref: JwtLambdaLayer }
      # 共通処理
      - ${self:custom.environment.${self:provider.stage}.COMMONLAMBDALAYER_ARN}
layers:
  jwt:
    path: checkjwt
    name: decode_verify_jwt
    compatibleRuntimes:
    - python3.8

#
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# ToDo change GatewayResponse
resources:
  Resources:
    # ゲートウェイのレスポンスを変更
    GatewayResponse403:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseTemplates:
          application/json: '{ "appMessage": $context.authorizer.errmessage, "message": $context.error.messageString, "res": $context.authorizer.additional_res }'
        ResponseType: ACCESS_DENIED
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '403'
    GatewayResponse401:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseTemplates:
          application/json: '{ "appMessage": $context.authorizer.errmessage, "message": $context.error.messageString, "res": $context.authorizer.additional_res }'
        ResponseType: UNAUTHORIZED
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '401'
    GatewayResponse500:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseTemplates:
          application/json: '{ "appMessage": $context.authorizer.errmessage, "message": $context.error.messageString, "res": $context.authorizer.additional_res }'
        ResponseType: AUTHORIZER_CONFIGURATION_ERROR
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '500'
 
